// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: tcp.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息类型枚举
type MsgType int32

const (
	MsgType_MSG_TYPE_UNKNOWN         MsgType = 0 // 未知类型
	MsgType_MSG_TYPE_HEARTBEAT       MsgType = 1 // 心跳消息
	MsgType_MSG_TYPE_TASK            MsgType = 2 // 任务
	MsgType_MSG_TYPE_TASKRESP        MsgType = 3 // 任务应答
	MsgType_MSG_TYPE_HTTP_PROXY_REQ  MsgType = 4 // HTTP代理请求
	MsgType_MSG_TYPE_HTTP_PROXY_RESP MsgType = 5 // HTTP代理响应
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "MSG_TYPE_UNKNOWN",
		1: "MSG_TYPE_HEARTBEAT",
		2: "MSG_TYPE_TASK",
		3: "MSG_TYPE_TASKRESP",
		4: "MSG_TYPE_HTTP_PROXY_REQ",
		5: "MSG_TYPE_HTTP_PROXY_RESP",
	}
	MsgType_value = map[string]int32{
		"MSG_TYPE_UNKNOWN":         0,
		"MSG_TYPE_HEARTBEAT":       1,
		"MSG_TYPE_TASK":            2,
		"MSG_TYPE_TASKRESP":        3,
		"MSG_TYPE_HTTP_PROXY_REQ":  4,
		"MSG_TYPE_HTTP_PROXY_RESP": 5,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[0].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[0]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

// 消息类型枚举
type TaskType int32

const (
	TaskType_TASK_TYPE_UNKNOWN      TaskType = 0 // 未知类型
	TaskType_TASK_TYPE_RESETPWD     TaskType = 1 // 重置密码
	TaskType_TASK_TYPE_TC           TaskType = 2 // 网卡限速
	TaskType_TASK_TYPE_TC_CLEAN     TaskType = 3 // 网卡限速清理
	TaskType_TASK_TYPE_TC_STATUS    TaskType = 4 // 网卡限速状态
	TaskType_TASK_TYPE_ROUTER_ADMIN TaskType = 5 // 路由器管理
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TASK_TYPE_UNKNOWN",
		1: "TASK_TYPE_RESETPWD",
		2: "TASK_TYPE_TC",
		3: "TASK_TYPE_TC_CLEAN",
		4: "TASK_TYPE_TC_STATUS",
		5: "TASK_TYPE_ROUTER_ADMIN",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_UNKNOWN":      0,
		"TASK_TYPE_RESETPWD":     1,
		"TASK_TYPE_TC":           2,
		"TASK_TYPE_TC_CLEAN":     3,
		"TASK_TYPE_TC_STATUS":    4,
		"TASK_TYPE_ROUTER_ADMIN": 5,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_tcp_proto_enumTypes[1].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_tcp_proto_enumTypes[1]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{1}
}

type Heartbeat struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Sn        string                 `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Ver       string                 `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
	Timestamp int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 使用int64类型表示Unix时间戳
	// 进程信息
	Monitor       *SystemMonitorData `protobuf:"bytes,4,opt,name=monitor,proto3" json:"monitor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_tcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{0}
}

func (x *Heartbeat) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *Heartbeat) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *Heartbeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Heartbeat) GetMonitor() *SystemMonitorData {
	if x != nil {
		return x.Monitor
	}
	return nil
}

type DeviceAgent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sn            string                 `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Ver           string                 `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
	RemoteAddr    string                 `protobuf:"bytes,3,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                              // 最后心跳带上来的时间
	LastHeartbear int64                  `protobuf:"varint,5,opt,name=last_heartbear,json=lastHeartbear,proto3" json:"last_heartbear,omitempty"` // 最后心跳时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceAgent) Reset() {
	*x = DeviceAgent{}
	mi := &file_tcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAgent) ProtoMessage() {}

func (x *DeviceAgent) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAgent.ProtoReflect.Descriptor instead.
func (*DeviceAgent) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceAgent) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DeviceAgent) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *DeviceAgent) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *DeviceAgent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DeviceAgent) GetLastHeartbear() int64 {
	if x != nil {
		return x.LastHeartbear
	}
	return 0
}

// 任务结构体
type Task struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TaskId     string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskType   TaskType               `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3,enum=protos.TaskType" json:"task_type,omitempty"`
	Timestamp  int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sn         string                 `protobuf:"bytes,4,opt,name=sn,proto3" json:"sn,omitempty"`                                   // 设备SN
	AccessName string                 `protobuf:"bytes,5,opt,name=access_name,json=accessName,proto3" json:"access_name,omitempty"` // 接入服务名
	// 重置密码字段
	Username *string `protobuf:"bytes,6,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Pwd      *string `protobuf:"bytes,7,opt,name=pwd,proto3,oneof" json:"pwd,omitempty"`
	// 网卡限速
	IfaceName *string `protobuf:"bytes,8,opt,name=iface_name,json=ifaceName,proto3,oneof" json:"iface_name,omitempty"`
	Rate      *string `protobuf:"bytes,9,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	TargetIp  *string `protobuf:"bytes,10,opt,name=target_ip,json=targetIp,proto3,oneof" json:"target_ip,omitempty"`
	// 任务执行结果
	ErrMsg string `protobuf:"bytes,11,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	// 路由器管理URL
	Url           *string `protobuf:"bytes,12,opt,name=url,proto3,oneof" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_tcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{2}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_UNKNOWN
}

func (x *Task) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Task) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *Task) GetAccessName() string {
	if x != nil {
		return x.AccessName
	}
	return ""
}

func (x *Task) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *Task) GetPwd() string {
	if x != nil && x.Pwd != nil {
		return *x.Pwd
	}
	return ""
}

func (x *Task) GetIfaceName() string {
	if x != nil && x.IfaceName != nil {
		return *x.IfaceName
	}
	return ""
}

func (x *Task) GetRate() string {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return ""
}

func (x *Task) GetTargetIp() string {
	if x != nil && x.TargetIp != nil {
		return *x.TargetIp
	}
	return ""
}

func (x *Task) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *Task) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// 系统监控进程信息
type SystemMonitorProcess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           int32                  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Exe           string                 `protobuf:"bytes,3,opt,name=exe,proto3" json:"exe,omitempty"`
	Cpu           float32                `protobuf:"fixed32,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        float32                `protobuf:"fixed32,5,opt,name=memory,proto3" json:"memory,omitempty"`
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemMonitorProcess) Reset() {
	*x = SystemMonitorProcess{}
	mi := &file_tcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMonitorProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMonitorProcess) ProtoMessage() {}

func (x *SystemMonitorProcess) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMonitorProcess.ProtoReflect.Descriptor instead.
func (*SystemMonitorProcess) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{3}
}

func (x *SystemMonitorProcess) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SystemMonitorProcess) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemMonitorProcess) GetExe() string {
	if x != nil {
		return x.Exe
	}
	return ""
}

func (x *SystemMonitorProcess) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *SystemMonitorProcess) GetMemory() float32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SystemMonitorProcess) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 系统监控CPU信息
type SystemMonitorCpu struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Usage         float32                `protobuf:"fixed32,1,opt,name=usage,proto3" json:"usage,omitempty"`
	Cores         int32                  `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	Temperature   float32                `protobuf:"fixed32,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemMonitorCpu) Reset() {
	*x = SystemMonitorCpu{}
	mi := &file_tcp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMonitorCpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMonitorCpu) ProtoMessage() {}

func (x *SystemMonitorCpu) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMonitorCpu.ProtoReflect.Descriptor instead.
func (*SystemMonitorCpu) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{4}
}

func (x *SystemMonitorCpu) GetUsage() float32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

func (x *SystemMonitorCpu) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *SystemMonitorCpu) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

// 系统监控内存信息
type SystemMonitorMemory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Used          int64                  `protobuf:"varint,1,opt,name=used,proto3" json:"used,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Available     int64                  `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemMonitorMemory) Reset() {
	*x = SystemMonitorMemory{}
	mi := &file_tcp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMonitorMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMonitorMemory) ProtoMessage() {}

func (x *SystemMonitorMemory) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMonitorMemory.ProtoReflect.Descriptor instead.
func (*SystemMonitorMemory) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{5}
}

func (x *SystemMonitorMemory) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *SystemMonitorMemory) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SystemMonitorMemory) GetAvailable() int64 {
	if x != nil {
		return x.Available
	}
	return 0
}

// 系统监控磁盘信息
type SystemMonitorDisk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Used          int64                  `protobuf:"varint,1,opt,name=used,proto3" json:"used,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Free          int64                  `protobuf:"varint,3,opt,name=free,proto3" json:"free,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemMonitorDisk) Reset() {
	*x = SystemMonitorDisk{}
	mi := &file_tcp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMonitorDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMonitorDisk) ProtoMessage() {}

func (x *SystemMonitorDisk) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMonitorDisk.ProtoReflect.Descriptor instead.
func (*SystemMonitorDisk) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{6}
}

func (x *SystemMonitorDisk) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *SystemMonitorDisk) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SystemMonitorDisk) GetFree() int64 {
	if x != nil {
		return x.Free
	}
	return 0
}

// 系统监控网络信息
type SystemMonitorNetwork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                   // 网络接口名称
	BytesSent     uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`       // 发送的字节数
	BytesRecv     uint64                 `protobuf:"varint,3,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`       // 接收的字节数
	PacketsSent   uint64                 `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"` // 发送的数据包数
	PacketsRecv   uint64                 `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv,proto3" json:"packets_recv,omitempty"` // 接收的数据包数
	Errin         uint64                 `protobuf:"varint,6,opt,name=errin,proto3" json:"errin,omitempty"`                                // 接收错误数
	Errout        uint64                 `protobuf:"varint,7,opt,name=errout,proto3" json:"errout,omitempty"`                              // 发送错误数
	Dropin        uint64                 `protobuf:"varint,8,opt,name=dropin,proto3" json:"dropin,omitempty"`                              // 接收丢包数
	Dropout       uint64                 `protobuf:"varint,9,opt,name=dropout,proto3" json:"dropout,omitempty"`                            // 发送丢包数
	Timestamp     int64                  `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                       // 采样时间
	SendRate      float64                `protobuf:"fixed64,11,opt,name=send_rate,json=sendRate,proto3" json:"send_rate,omitempty"`        // 发送速率 (bytes/s)
	RecvRate      float64                `protobuf:"fixed64,12,opt,name=recv_rate,json=recvRate,proto3" json:"recv_rate,omitempty"`        // 接收速率 (bytes/s)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemMonitorNetwork) Reset() {
	*x = SystemMonitorNetwork{}
	mi := &file_tcp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMonitorNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMonitorNetwork) ProtoMessage() {}

func (x *SystemMonitorNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMonitorNetwork.ProtoReflect.Descriptor instead.
func (*SystemMonitorNetwork) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{7}
}

func (x *SystemMonitorNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemMonitorNetwork) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *SystemMonitorNetwork) GetBytesRecv() uint64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

func (x *SystemMonitorNetwork) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *SystemMonitorNetwork) GetPacketsRecv() uint64 {
	if x != nil {
		return x.PacketsRecv
	}
	return 0
}

func (x *SystemMonitorNetwork) GetErrin() uint64 {
	if x != nil {
		return x.Errin
	}
	return 0
}

func (x *SystemMonitorNetwork) GetErrout() uint64 {
	if x != nil {
		return x.Errout
	}
	return 0
}

func (x *SystemMonitorNetwork) GetDropin() uint64 {
	if x != nil {
		return x.Dropin
	}
	return 0
}

func (x *SystemMonitorNetwork) GetDropout() uint64 {
	if x != nil {
		return x.Dropout
	}
	return 0
}

func (x *SystemMonitorNetwork) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SystemMonitorNetwork) GetSendRate() float64 {
	if x != nil {
		return x.SendRate
	}
	return 0
}

func (x *SystemMonitorNetwork) GetRecvRate() float64 {
	if x != nil {
		return x.RecvRate
	}
	return 0
}

// 获取设备系统监控数据
type SystemMonitorData struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Cpu           *SystemMonitorCpu       `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        *SystemMonitorMemory    `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk          *SystemMonitorDisk      `protobuf:"bytes,3,opt,name=disk,proto3" json:"disk,omitempty"`
	Network       []*SystemMonitorNetwork `protobuf:"bytes,4,rep,name=network,proto3" json:"network,omitempty"`
	Processes     []*SystemMonitorProcess `protobuf:"bytes,5,rep,name=processes,proto3" json:"processes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemMonitorData) Reset() {
	*x = SystemMonitorData{}
	mi := &file_tcp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMonitorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMonitorData) ProtoMessage() {}

func (x *SystemMonitorData) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMonitorData.ProtoReflect.Descriptor instead.
func (*SystemMonitorData) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{8}
}

func (x *SystemMonitorData) GetCpu() *SystemMonitorCpu {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *SystemMonitorData) GetMemory() *SystemMonitorMemory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *SystemMonitorData) GetDisk() *SystemMonitorDisk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *SystemMonitorData) GetNetwork() []*SystemMonitorNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SystemMonitorData) GetProcesses() []*SystemMonitorProcess {
	if x != nil {
		return x.Processes
	}
	return nil
}

// HTTP代理请求
type HttpProxyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                      // 会话ID，用于标识一个HTTP代理会话
	DeviceSn      string                 `protobuf:"bytes,2,opt,name=device_sn,json=deviceSn,proto3" json:"device_sn,omitempty"`                                                         // 设备序列号
	Method        string                 `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`                                                                             // HTTP方法：GET, POST等
	Url           string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`                                                                                   // 目标URL
	Headers       map[string]string      `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // HTTP请求头
	Body          []byte                 `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`                                                                                 // 请求体
	ProxyId       string                 `protobuf:"bytes,7,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`                                                            // 代理ID，用于标识代理目标（如router-admin）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpProxyRequest) Reset() {
	*x = HttpProxyRequest{}
	mi := &file_tcp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProxyRequest) ProtoMessage() {}

func (x *HttpProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProxyRequest.ProtoReflect.Descriptor instead.
func (*HttpProxyRequest) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{9}
}

func (x *HttpProxyRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *HttpProxyRequest) GetDeviceSn() string {
	if x != nil {
		return x.DeviceSn
	}
	return ""
}

func (x *HttpProxyRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpProxyRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpProxyRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpProxyRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HttpProxyRequest) GetProxyId() string {
	if x != nil {
		return x.ProxyId
	}
	return ""
}

// HTTP代理响应
type HttpProxyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                      // 会话ID，与请求对应
	StatusCode    int32                  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                  // HTTP状态码
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // HTTP响应头
	Body          []byte                 `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`                                                                                 // 响应体
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                                                                               // 错误信息，如果有
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpProxyResponse) Reset() {
	*x = HttpProxyResponse{}
	mi := &file_tcp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProxyResponse) ProtoMessage() {}

func (x *HttpProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProxyResponse.ProtoReflect.Descriptor instead.
func (*HttpProxyResponse) Descriptor() ([]byte, []int) {
	return file_tcp_proto_rawDescGZIP(), []int{10}
}

func (x *HttpProxyResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *HttpProxyResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HttpProxyResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpProxyResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HttpProxyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_tcp_proto protoreflect.FileDescriptor

const file_tcp_proto_rawDesc = "" +
	"\n" +
	"\ttcp.proto\x12\x06protos\"\x80\x01\n" +
	"\tHeartbeat\x12\x0e\n" +
	"\x02sn\x18\x01 \x01(\tR\x02sn\x12\x10\n" +
	"\x03ver\x18\x02 \x01(\tR\x03ver\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x123\n" +
	"\amonitor\x18\x04 \x01(\v2\x19.protos.SystemMonitorDataR\amonitor\"\x95\x01\n" +
	"\vDeviceAgent\x12\x0e\n" +
	"\x02sn\x18\x01 \x01(\tR\x02sn\x12\x10\n" +
	"\x03ver\x18\x02 \x01(\tR\x03ver\x12\x1f\n" +
	"\vremote_addr\x18\x03 \x01(\tR\n" +
	"remoteAddr\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x12%\n" +
	"\x0elast_heartbear\x18\x05 \x01(\x03R\rlastHeartbear\"\xa7\x03\n" +
	"\x04Task\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12-\n" +
	"\ttask_type\x18\x02 \x01(\x0e2\x10.protos.TaskTypeR\btaskType\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x0e\n" +
	"\x02sn\x18\x04 \x01(\tR\x02sn\x12\x1f\n" +
	"\vaccess_name\x18\x05 \x01(\tR\n" +
	"accessName\x12\x1f\n" +
	"\busername\x18\x06 \x01(\tH\x00R\busername\x88\x01\x01\x12\x15\n" +
	"\x03pwd\x18\a \x01(\tH\x01R\x03pwd\x88\x01\x01\x12\"\n" +
	"\n" +
	"iface_name\x18\b \x01(\tH\x02R\tifaceName\x88\x01\x01\x12\x17\n" +
	"\x04rate\x18\t \x01(\tH\x03R\x04rate\x88\x01\x01\x12 \n" +
	"\ttarget_ip\x18\n" +
	" \x01(\tH\x04R\btargetIp\x88\x01\x01\x12\x17\n" +
	"\aerr_msg\x18\v \x01(\tR\x06errMsg\x12\x15\n" +
	"\x03url\x18\f \x01(\tH\x05R\x03url\x88\x01\x01B\v\n" +
	"\t_usernameB\x06\n" +
	"\x04_pwdB\r\n" +
	"\v_iface_nameB\a\n" +
	"\x05_rateB\f\n" +
	"\n" +
	"_target_ipB\x06\n" +
	"\x04_url\"\x90\x01\n" +
	"\x14SystemMonitorProcess\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\x05R\x03pid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x10\n" +
	"\x03exe\x18\x03 \x01(\tR\x03exe\x12\x10\n" +
	"\x03cpu\x18\x04 \x01(\x02R\x03cpu\x12\x16\n" +
	"\x06memory\x18\x05 \x01(\x02R\x06memory\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\"`\n" +
	"\x10SystemMonitorCpu\x12\x14\n" +
	"\x05usage\x18\x01 \x01(\x02R\x05usage\x12\x14\n" +
	"\x05cores\x18\x02 \x01(\x05R\x05cores\x12 \n" +
	"\vtemperature\x18\x03 \x01(\x02R\vtemperature\"]\n" +
	"\x13SystemMonitorMemory\x12\x12\n" +
	"\x04used\x18\x01 \x01(\x03R\x04used\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x1c\n" +
	"\tavailable\x18\x03 \x01(\x03R\tavailable\"Q\n" +
	"\x11SystemMonitorDisk\x12\x12\n" +
	"\x04used\x18\x01 \x01(\x03R\x04used\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04free\x18\x03 \x01(\x03R\x04free\"\xe6\x02\n" +
	"\x14SystemMonitorNetwork\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x02 \x01(\x04R\tbytesSent\x12\x1d\n" +
	"\n" +
	"bytes_recv\x18\x03 \x01(\x04R\tbytesRecv\x12!\n" +
	"\fpackets_sent\x18\x04 \x01(\x04R\vpacketsSent\x12!\n" +
	"\fpackets_recv\x18\x05 \x01(\x04R\vpacketsRecv\x12\x14\n" +
	"\x05errin\x18\x06 \x01(\x04R\x05errin\x12\x16\n" +
	"\x06errout\x18\a \x01(\x04R\x06errout\x12\x16\n" +
	"\x06dropin\x18\b \x01(\x04R\x06dropin\x12\x18\n" +
	"\adropout\x18\t \x01(\x04R\adropout\x12\x1c\n" +
	"\ttimestamp\x18\n" +
	" \x01(\x03R\ttimestamp\x12\x1b\n" +
	"\tsend_rate\x18\v \x01(\x01R\bsendRate\x12\x1b\n" +
	"\trecv_rate\x18\f \x01(\x01R\brecvRate\"\x97\x02\n" +
	"\x11SystemMonitorData\x12*\n" +
	"\x03cpu\x18\x01 \x01(\v2\x18.protos.SystemMonitorCpuR\x03cpu\x123\n" +
	"\x06memory\x18\x02 \x01(\v2\x1b.protos.SystemMonitorMemoryR\x06memory\x12-\n" +
	"\x04disk\x18\x03 \x01(\v2\x19.protos.SystemMonitorDiskR\x04disk\x126\n" +
	"\anetwork\x18\x04 \x03(\v2\x1c.protos.SystemMonitorNetworkR\anetwork\x12:\n" +
	"\tprocesses\x18\x05 \x03(\v2\x1c.protos.SystemMonitorProcessR\tprocesses\"\xa4\x02\n" +
	"\x10HttpProxyRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1b\n" +
	"\tdevice_sn\x18\x02 \x01(\tR\bdeviceSn\x12\x16\n" +
	"\x06method\x18\x03 \x01(\tR\x06method\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12?\n" +
	"\aheaders\x18\x05 \x03(\v2%.protos.HttpProxyRequest.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x06 \x01(\fR\x04body\x12\x19\n" +
	"\bproxy_id\x18\a \x01(\tR\aproxyId\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xfb\x01\n" +
	"\x11HttpProxyResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1f\n" +
	"\vstatus_code\x18\x02 \x01(\x05R\n" +
	"statusCode\x12@\n" +
	"\aheaders\x18\x03 \x03(\v2&.protos.HttpProxyResponse.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*\x9c\x01\n" +
	"\aMsgType\x12\x14\n" +
	"\x10MSG_TYPE_UNKNOWN\x10\x00\x12\x16\n" +
	"\x12MSG_TYPE_HEARTBEAT\x10\x01\x12\x11\n" +
	"\rMSG_TYPE_TASK\x10\x02\x12\x15\n" +
	"\x11MSG_TYPE_TASKRESP\x10\x03\x12\x1b\n" +
	"\x17MSG_TYPE_HTTP_PROXY_REQ\x10\x04\x12\x1c\n" +
	"\x18MSG_TYPE_HTTP_PROXY_RESP\x10\x05*\x98\x01\n" +
	"\bTaskType\x12\x15\n" +
	"\x11TASK_TYPE_UNKNOWN\x10\x00\x12\x16\n" +
	"\x12TASK_TYPE_RESETPWD\x10\x01\x12\x10\n" +
	"\fTASK_TYPE_TC\x10\x02\x12\x16\n" +
	"\x12TASK_TYPE_TC_CLEAN\x10\x03\x12\x17\n" +
	"\x13TASK_TYPE_TC_STATUS\x10\x04\x12\x1a\n" +
	"\x16TASK_TYPE_ROUTER_ADMIN\x10\x05B'Z%github.com/liuhengloveyou/pcdn/protosb\x06proto3"

var (
	file_tcp_proto_rawDescOnce sync.Once
	file_tcp_proto_rawDescData []byte
)

func file_tcp_proto_rawDescGZIP() []byte {
	file_tcp_proto_rawDescOnce.Do(func() {
		file_tcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tcp_proto_rawDesc), len(file_tcp_proto_rawDesc)))
	})
	return file_tcp_proto_rawDescData
}

var file_tcp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tcp_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tcp_proto_goTypes = []any{
	(MsgType)(0),                 // 0: protos.MsgType
	(TaskType)(0),                // 1: protos.TaskType
	(*Heartbeat)(nil),            // 2: protos.Heartbeat
	(*DeviceAgent)(nil),          // 3: protos.DeviceAgent
	(*Task)(nil),                 // 4: protos.Task
	(*SystemMonitorProcess)(nil), // 5: protos.SystemMonitorProcess
	(*SystemMonitorCpu)(nil),     // 6: protos.SystemMonitorCpu
	(*SystemMonitorMemory)(nil),  // 7: protos.SystemMonitorMemory
	(*SystemMonitorDisk)(nil),    // 8: protos.SystemMonitorDisk
	(*SystemMonitorNetwork)(nil), // 9: protos.SystemMonitorNetwork
	(*SystemMonitorData)(nil),    // 10: protos.SystemMonitorData
	(*HttpProxyRequest)(nil),     // 11: protos.HttpProxyRequest
	(*HttpProxyResponse)(nil),    // 12: protos.HttpProxyResponse
	nil,                          // 13: protos.HttpProxyRequest.HeadersEntry
	nil,                          // 14: protos.HttpProxyResponse.HeadersEntry
}
var file_tcp_proto_depIdxs = []int32{
	10, // 0: protos.Heartbeat.monitor:type_name -> protos.SystemMonitorData
	1,  // 1: protos.Task.task_type:type_name -> protos.TaskType
	6,  // 2: protos.SystemMonitorData.cpu:type_name -> protos.SystemMonitorCpu
	7,  // 3: protos.SystemMonitorData.memory:type_name -> protos.SystemMonitorMemory
	8,  // 4: protos.SystemMonitorData.disk:type_name -> protos.SystemMonitorDisk
	9,  // 5: protos.SystemMonitorData.network:type_name -> protos.SystemMonitorNetwork
	5,  // 6: protos.SystemMonitorData.processes:type_name -> protos.SystemMonitorProcess
	13, // 7: protos.HttpProxyRequest.headers:type_name -> protos.HttpProxyRequest.HeadersEntry
	14, // 8: protos.HttpProxyResponse.headers:type_name -> protos.HttpProxyResponse.HeadersEntry
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tcp_proto_init() }
func file_tcp_proto_init() {
	if File_tcp_proto != nil {
		return
	}
	file_tcp_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tcp_proto_rawDesc), len(file_tcp_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tcp_proto_goTypes,
		DependencyIndexes: file_tcp_proto_depIdxs,
		EnumInfos:         file_tcp_proto_enumTypes,
		MessageInfos:      file_tcp_proto_msgTypes,
	}.Build()
	File_tcp_proto = out.File
	file_tcp_proto_goTypes = nil
	file_tcp_proto_depIdxs = nil
}
